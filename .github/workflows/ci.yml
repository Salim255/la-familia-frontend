# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs
name: CI
on:
  pull_request:
    branches: [develop, master]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache node_modules
        uses: actions/cache@v1

        with:
          #Where the cash stored in the home for linux
          path: ~/.npm

          #This key will be used by actions/cache@v1, to retrieve our cash, if it's exist otherwise will be created

          key: ${{ runner.os }}-node-key-${{ hashFiles('**/package-lock.json') }}

          #This expression will allow me to create new cache key every time npm dependencies has changed, and also to have a unique key with every runner.

          restore-keys: |
            ${{runner.os}}-node-key-
          #Restore-keys are extra keys that github can search for caches at , in github didn't find any caches using the main key

      - name: Use NodeJs
        uses: actions/setup-node@v1
        with:
          node-version: "17.x"
      - run: npm ci
      - run: npm run format:check
      - run: npm test -- --coverage
        env:
          CI: true
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          #My artifacts name so we can retrieve under this name
          name: dist-files
          # Path tell where to find the files should be stored as artifacts, we can store as many as we need
          # path: dist
          path: |
            dist
            package.json
  deploy:
    ## Needs determine weather the job run parallel or not
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          #This wil download the artifacts create in build then unzip it, so it will be available in this deploy job
          name: dist-files
      - name: Output contents
        run: ls
      - name: Deploy
        run: echo "Deploying..."
